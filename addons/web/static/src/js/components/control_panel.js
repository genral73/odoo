odoo.define('web.ControlPanel', function (require) {
    "use strict";

    const ControlPanelModel = require('web.ControlPanelModel');
    const FavoriteMenu = require('web.FavoriteMenu');
    const FilterMenu = require('web.FilterMenu');
    const GroupByMenu = require('web.GroupByMenu');
    const Pager = require('web.Pager');
    const SearchBar = require('web.SearchBar');
    const Sidebar = require('web.Sidebar');
    const TimeRangeMenu = require('web.TimeRangeMenu');
    const { useModel } = require('web.model');

    const { Component, hooks } = owl;
    const { useRef, useState, useSubEnv } = hooks;

    /**
     * Extract the 'cp_content' key of the given props and return them as well as
     * the extracted content.
     * @param {Object} props
     * @returns {Object}
     */
    function getAdditionalContent(props) {
        const additionalContent = {};
        if ('cp_content' in props) {
            const content = props.cp_content || {};
            if ('$buttons' in content) {
                additionalContent.buttons = content.$buttons;
            }
            if ('$searchview' in content) {
                additionalContent.searchView = content.$searchview;
            }
            if ('$pager' in content) {
                additionalContent.pager = content.$pager;
            }
            if ('$searchview_buttons' in content) {
                additionalContent.searchViewButtons = content.$searchview_buttons;
            }
        }
        return additionalContent;
    }

    /**
     * Control panel
     *
     * The control panel of the action|view. In its standard form, it is composed
     * of several sections/subcomponents. Here is a simplified graph representing
     * the action|view and its control panel:
     *
     * ┌ View Controller | Action --------------------------------------------------------┐
     * | ┌ Control Panel ──────────┬────────────────────────────────────────────────────┐ |
     * | │ ┌ Breadcrumbs ────────┐ │ ┌ Search View ───────────────────────────────────┐ │ |
     * | │ │ [1] / [2]           │ │ │ [3] [ =============== 4 ================ ] [5] │ │ |
     * | │ └─────────────────────┘ │ └────────────────────────────────────────────────┘ │ |
     * | ├─────────────────────────┼────────────────────────────────────────────────────┤ |
     * | │ ┌ Buttons ┐ ┌ Sidebar ┐ │ ┌ Search View Buttons ┐ ┌ Pager ┐┌ View switcher ┐ │ |
     * | │ │ [6]     │ │ [7]     │ │ │ [8] [9] [10] [11]   │ │ [12]  ││ [13]          │ │ |
     * | │ └─────────┘ └─────────┘ │ └─────────────────────┘ └───────┘└───────────────┘ │ |
     * | └─────────────────────────┴────────────────────────────────────────────────────┘ |
     * | ┌ View Renderer | Action content ──────────────────────────────────────────────┐ |
     * | │                                                                              │ |
     * | │  ...                                                                         │ |
     * | │                                                                              │ |
     * | │                                                                              │ |
     * | │                                                                              │ |
     * | └──────────────────────────────────────────────────────────────────────────────┘ |
     * └----------------------------------------------------------------------------------┘
     *
     * 1. Breadcrumbs: list of links composed by the `props.breadcrumbs` collection.
     * 2. Title: the title of the action|view. Can be empty and will yield 'Unnamed'.
     * 3. Search facets: a collection of facet components generated by the `ControlPanelModel`
     *    and handled by the `SearchBar` component. @see SearchFacet
     * 4. SearchBar: @see SearchBar
     * 5. Advanced search: small buttons used to toggle the [Search View Buttons] section.
     *    Will not be displayed if the allowed `props.searchMenuTypes` list is empty.
     * 6. Buttons: section in which the action|controller is meant to inject its control
     *             buttons. The template provides a slot for this purpose.
     * 7. Side bar: @see SideBar
     * 8. Filter menu: @see FilterMenu
     * 9. Group by menu: @see GroupByMenu
     * 10. Time range menu: @see TimeRangeMenu
     * 11. Favorite menu: @see FavoriteMenu
     * 12. Pager: @see Pager
     * 13. View switcher buttons: list of buttons composed by the `props.views` collection.
     *
     * Subcomponents (especially in the [Search View Buttons] section) will call
     * the ControlPanelModel to get processed information about the current view|action.
     * @see ControlPanelModel for more details.
     *
     * Note: an additional temporary (and ugly) mechanic allows to inject a jQuery element
     * given in `props.cp_component` in a related section:
     *      $buttons -> [Buttons]
     *      $searchview -> [Search View]
     *      $searchview_buttons -> [Search View Buttons]
     *      $pager -> [Pager]
     * This system must be replaced by proper slot usage and the static template
     * inheritance mechanism when converting the views/actions.
     * @extends Component
     */
    class ControlPanel extends Component {
        constructor() {
            super(...arguments);

            this.additionalContent = getAdditionalContent(this.props);

            useSubEnv({
                action: this.props.action,
                controlPanelModel: this.props.controlPanelModel,
            });

            this.state = useState(this._getInitialState());
            if (this.env.controlPanelModel) {
                useModel('controlPanelModel');
            }

            // Reference hooks
            this.contentRefs = {
                buttons: useRef('buttons'),
                pager: useRef('pager'),
                searchView: useRef('searchView'),
                searchViewButtons: useRef('searchViewButtons'),
            };
        }

        mounted() {
            this._attachAdditionalContent();
        }

        patched() {
            this._attachAdditionalContent();
        }

        async willUpdateProps(nextProps) {
            this.additionalContent = getAdditionalContent(nextProps);
            if ('action' in nextProps) {
                this.env.action = nextProps.action;
            }
        }

        //---------------------------------------------------------------------
        // Private
        //---------------------------------------------------------------------

        /**
         * Attach additional content extracted from the props 'cp_content' key, if any.
         * @private
         */
        _attachAdditionalContent() {
            for (const key in this.additionalContent) {
                if (this.additionalContent[key] && this.additionalContent[key].length) {
                    const target = this.contentRefs[key].el;
                    if (target) {
                        target.innerHTML = "";
                        target.append(...this.additionalContent[key]);
                    }
                }
            }
        }

        /**
         * @private
         * @returns {Object}
         */
        _getInitialState() {
            return {
                displayDropdowns: true,
                openedMenu: null,
            };
        }
    }

    ControlPanel.components = {
        SearchBar,
        Sidebar, Pager,
        FilterMenu, GroupByMenu, TimeRangeMenu, FavoriteMenu,
    };
    ControlPanel.defaultProps = {
        breadcrumbs: [],
        fields: {},
        searchMenuTypes: [],
        views: [],
        withBreadcrumbs: true,
        withSearchBar: true,
    };
    ControlPanel.props = {
        action: Object,
        breadcrumbs: Array,
        controlPanelModel: ControlPanelModel,
        cp_content: { type: Object, optional: 1 },
        fields: Object,
        pager: { validate: p => typeof p === 'object' || p === null, optional: 1 },
        searchMenuTypes: Array,
        sidebar: { validate: s => typeof s === 'object' || s === null, optional: 1 },
        title: { type: String, optional: 1 },
        viewType: { type: String, optional: 1 },
        views: Array,
        withBreadcrumbs: Boolean,
        withSearchBar: Boolean,
    };

    ControlPanel.template = 'ControlPanel';

    return ControlPanel;
});
